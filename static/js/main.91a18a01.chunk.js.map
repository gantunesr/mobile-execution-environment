{"version":3,"sources":["constants/methods.ts","constants/error.ts","core/ProxyMessageStream.ts","core/ExecutionController.ts","constants/worker.ts","App.js","reportWebVitals.js","index.js"],"names":["METHODS","PROXY_MSG_STREAM_ERROR","ProxyMessageStream","name","target","targetOrigin","window","location","origin","targetWindow","_name","_target","_targetOrigin","_targetWindow","postMessage","Error","_onMessage","bind","addEventListener","_handshake","data","console","log","this","JSON","stringify","event","message","parse","_onData","removeEventListener","BasePostMessageStream","ExecutionController","proxyService","_jobs","_proxyService","_createWindow","jobId","Promise","resolve","reject","iframe","document","createElement","setAttribute","body","appendChild","contentWindow","_deleteWindow","getElementById","parentNode","removeChild","_initJobStream","stream","WindowPostMessageStream","on","write","_handleJobDeletion","id","_update","newJob","newState","newElelment","job","get","terminateNext","delete","init","_destroy","App","useState","setProxyService","useEffect","proxy","ReactNativeWebView","executionController","method","jobs","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"0UAAaA,EACL,OADKA,EAEG,cAFHA,EAGD,UAHCA,EAIA,YAJAA,EAKD,UCLCC,EACS,4FCehBC,EAAkB,kDAsBtB,cAK4B,IAAD,EAJzBC,EAAI,EAAJA,KACAC,EAAM,EAANA,OAAO,EAAD,EACNC,oBAAY,MAAGC,OAAOC,SAASC,OAAM,MACrCC,oBAAY,MAAGH,OAAM,EAIrB,GAJqB,qBAErB,gBA3BFI,WAAK,IAELC,aAAO,IAEPC,mBAAa,IAEbC,mBAAa,EAwBS,qBAAXP,QACuB,oBAAvBA,OAAOQ,YAEd,MAAM,IAAIC,MAAMd,GAWA,OARlB,EAAKS,MAAQP,EACb,EAAKQ,QAAUP,EACf,EAAKQ,cAAgBP,EACrB,EAAKQ,cAAgBJ,EACrB,EAAKO,WAAa,EAAKA,WAAWC,KAAK,gBAEvCX,OAAOY,iBAAiB,UAAW,EAAKF,YAAY,GAEpD,EAAKG,aAAa,CACpB,CAkCC,OAlCA,yCAED,SAAaC,GACXC,QAAQC,IAAI,mEAAoEF,GAChFG,KAAKV,cAAcC,YACjBU,KAAKC,UAAU,CACbrB,OAAQmB,KAAKZ,QACbS,SAEFG,KAAKX,cAET,GAAC,wBAED,SAAWc,GACT,GAAqB,KAAjBA,EAAMlB,OAAV,CACA,IAAMmB,EAAUH,KAAKI,MAAMF,EAAMN,MAE7BO,EAAQvB,SAAWmB,KAAKb,QAW5BW,QAAQC,IAAI,kEAAmEK,EAAQP,MACvFG,KAAKM,QAAQF,EAAQP,MAfU,CAgBjC,GAAC,sBAED,WACEd,OAAOwB,oBAAoB,UAAWP,KAAKP,YAAY,EACzD,KAAC,EAhFqB,CAASe,yBCC3BC,EAAmB,aAKvB,cAAwD,IAAD,OAAzCC,EAAY,EAAZA,aAAY,yBAHnBC,WAAK,OACJC,mBAAa,OAOrBC,cAAgB,SAACC,GACf,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAASC,SAASC,cAAc,UACtCF,EAAOG,aAAa,KAAMP,GAE1BI,EAAOG,aAAa,MChCA,kEDiCpBF,SAASG,KAAKC,YAAYL,GAG1BA,EAAOvB,iBAAiB,QAAQ,WAC1BuB,EAAOM,cACTR,EAAQE,EAAOM,eAIfP,EACE,IAAIzB,MAAM,qDAAD,OAC8CsB,EAAK,OAIlE,IAEAI,EAAOG,aAAa,UAAW,gBACjC,GACF,EAAC,KAEDI,cAAgB,SAACX,GACf,IAAMI,EAASC,SAASO,eAAeZ,GACvC,IAAKI,IAAWA,EAAOS,WACrB,MAAM,IAAInC,MAAM,sBAAD,OAAuBsB,EAAK,mBAE7CI,EAAOS,WAAWC,YAAYV,EAChC,EAAC,KAEDW,eAAc,iDAAG,WAAOf,GAAa,mGACd,EAAKD,cAAcC,GAAO,KAAD,EAc5C,OAdI/B,EAAM,OACZe,QAAQC,IAAI,CAAEhB,WACR+C,EAAS,IAAIC,0BAAwB,CACzCnD,KAAM,SACNC,OAAQ,QACRK,aAAcH,EACdD,aAAc,MAEhBgB,QAAQC,IAAI,CAAE+B,WAEdA,EAAOE,GAAG,QAAQ,SAACnC,GACjBC,QAAQC,IAAI,yBAA0BF,GACtC,EAAKe,cAAcqB,MAAM,CAAEpC,OAAMiB,UACjC,EAAKoB,mBAAmB,CAAErC,OAAMiB,SAClC,IAAE,kBAEK,CAAEqB,GAAIrB,EAAO/B,SAAQ+C,WAAQ,2CACrC,mDAlBa,GAkBb,KAEDM,QAAU,SAACC,GACT,EAAK1B,MAAM0B,EAAOF,IAAME,EACxBvC,QAAQC,IAAI,6CAA8C,CAAEuC,SAAU,EAAK3B,MAAO4B,YAAaF,GACjG,EAAC,KAEDH,mBAAqB,YAA0D,IAAD,IAAtDpB,EAAK,EAALA,MAAOjB,EAAI,EAAJA,KACvB2C,EAAM,EAAKC,IAAI3B,GACrBhB,QAAQC,IAAI,yBAA6B,OAAHyC,QAAG,IAAHA,OAAG,EAAHA,EAAKE,cAAmB,OAAJ7C,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMA,YAAI,WAAN,EAAJ,EAAYsC,IAC7D,OAAHK,QAAG,IAAHA,KAAKE,gBAAoB,OAAHF,QAAG,IAAHA,OAAG,EAAHA,EAAKE,kBAAsB,OAAJ7C,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMA,YAAI,WAAN,EAAJ,EAAYsC,KAC3D,EAAKQ,OAAO7B,EAElB,EAAC,KAID8B,KAAI,iDAAG,WAAO9B,GAAa,iFACuC,OAAhEhB,QAAQC,IAAI,oDAAoD,SAC9C,EAAK8B,eAAef,GAAO,KAAD,EAAtC0B,EAAG,OACT,EAAKJ,QAAQI,GAAK,2CACnB,mDAJG,GAIH,KAEDC,IAAM,SAAC3B,GACL,IAAM0B,EAAM,EAAK7B,MAAMG,GAEvB,OADAhB,QAAQC,IAAI,oCAAqC,CAAEe,QAAO0B,QACnDA,CACT,EAAE,KAEFG,OAAS,SAAC7B,GACRhB,QAAQC,IAAI,oCAAqC,CAAEe,UACnD,EAAKH,MAAMG,GAAOgB,OAAOe,WACzB/C,QAAQC,IAAI,4CAA6C,CAAEe,UAC3D,EAAKW,cAAcX,GACnBhB,QAAQC,IAAI,4CAA6C,CAAEe,iBACpD,EAAKH,MAAMG,GAClBhB,QAAQC,IAAI,oDAAqD,CAAEe,SACrE,EA9FEd,KAAKW,MAAQ,CAAC,EACdX,KAAKY,cAAgBF,CACvB,I,eE2DaoC,MA7Ef,WAEE,MAAwCC,qBAAU,mBAA3CrC,EAAY,KAAEsC,EAAe,KAsEpC,OApEAC,qBAAU,WACR,IAAMC,EAAQ,IAAIvE,EAAmB,CACnCC,KAAM,UACNC,OAAQ,SACRC,aAAc,IACdI,aAAcH,OAAOoE,qBAEvBH,EAAgBE,EAClB,GAAG,IAEHD,qBAAU,WACR,GAAKvC,EAAL,CAKAZ,QAAQC,IAAI,8DAEZ,IAAMqD,EAAsB,IAAI3C,EAAoB,CAClDC,iBAGFA,EAAasB,GAAG,OAAM,iDAAE,WAAOnC,GAAI,yFACjCC,QAAQC,IAAI,wCAAyCF,GAAM,EACRA,EAA3CA,KAASA,KAAQwD,EAAM,EAANA,OAAQlB,EAAE,EAAFA,GAAQrB,EAAUjB,EAAViB,MAAK,KAItCuC,EAAM,cACP5E,EAAY,SAQZA,EAAiB,UAOjBA,EAAoB,UAKpBA,EAAgB,UAKhBA,EAAgB,mBAxBmB,OAAtCqB,QAAQC,IAAIqD,EAAoBE,MAAM,SAChCF,EAAoBR,KAAK9B,GAAO,KAAD,EAGrC,OAFA0B,EAAMY,EAAoBX,IAAI3B,IAC1BgB,OAAOG,MAAMpC,EAAKA,MACtB,2BAOuB,OAHvBC,QAAQC,IAAI,8BAA+BF,EAAKA,KAAMiB,EAAOqB,IAC7DK,EAAMY,EAAoBX,IAAI3B,IAC1BgB,OAAOG,MAAMpC,EAAKA,MACtB2C,EAAIE,cAAgBP,EAAG,2BAKK,QAKA,QAKA,OAD5BK,EAAMY,EAAoBX,IAAI3B,IAC1BgB,OAAOG,MAAMpC,EAAKA,MAAM,4BAI5B2C,EAAMY,EAAoBX,IAAI3B,IAC1BgB,OAAOG,MAAMpC,EAAKA,MACtBC,QAAQC,IAAI,gBAAgB,4CAGjC,mDA3CqB,GATtB,CAqDF,GAAG,CAACW,IAGF,qBAAK6C,UAAU,OAEnB,ECtEeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECJaQ,IAASC,WAAW/C,SAASO,eAAe,SACpDyC,OACH,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,OAORZ,G","file":"static/js/main.91a18a01.chunk.js","sourcesContent":["export const METHODS = {\n  PING: 'ping',\n  EXECUTE_SNAP: 'executeSnap',\n  SNAP_RPC: 'snapRpc',\n  TERMINATE: 'terminate',\n  JSON_RPC: 'jsonRpc',\n}\n","export const PROXY_MSG_STREAM_ERROR = {\n  POST_MSG_NOT_FOUND: 'window.postMessage is not a function. This class should only be instantiated in a Window.',\n}","import {\n  BasePostMessageStream,\n  PostMessageEvent,\n} from '@metamask/post-message-stream';\nimport { PROXY_MSG_STREAM_ERROR } from '../constants';\n\ninterface ProxyMessageStreamArgs {\n  name: string;\n  target: string;\n  targetOrigin?: string;\n  targetWindow?: Window;\n}\n\n/**\n * A {@link Window.postMessage} stream.\n */\nclass ProxyMessageStream extends BasePostMessageStream {\n  _name;\n\n  _target;\n\n  _targetOrigin;\n\n  _targetWindow;\n\n  /**\n   * Creates a stream for communicating with other streams across the same or\n   * different `window` objects.\n   *\n   * @param args - Options bag.\n   * @param args.name - The name of the stream. Used to differentiate between\n   * multiple streams sharing the same window object.\n   * @param args.target - The name of the stream to exchange messages with.\n   * @param args.targetOrigin - The origin of the target. Defaults to\n   * `location.origin`, '*' is permitted.\n   * @param args.targetWindow - The window object of the target stream. Defaults\n   * to `window`.\n   */\n  constructor({\n    name,\n    target,\n    targetOrigin = window.location.origin,\n    targetWindow = window,\n  }: ProxyMessageStreamArgs) {\n    super();\n\n    if (\n      typeof window === 'undefined' ||\n      typeof window.postMessage !== 'function'\n    ) {\n      throw new Error(PROXY_MSG_STREAM_ERROR.POST_MSG_NOT_FOUND);\n    }\n\n    this._name = name;\n    this._target = target;\n    this._targetOrigin = targetOrigin;\n    this._targetWindow = targetWindow;\n    this._onMessage = this._onMessage.bind(this);\n\n    window.addEventListener('message', this._onMessage, false);\n\n    this._handshake();\n  }\n\n  _postMessage(data: unknown): void {\n    console.log('[ProxyMessageStream LOG] ProxyService returning result to RN App', data);\n    this._targetWindow.postMessage(\n      JSON.stringify({\n        target: this._target,\n        data,\n      }),\n      this._targetOrigin\n    );\n  }\n\n  _onMessage(event: PostMessageEvent): void {\n    if (event.origin !== \"\") return;\n    const message = JSON.parse(event.data as string);\n\n    if (message.target !== this._name) return;\n\n    /*if (\n        (this._targetOrigin !== '*' && event.origin !== this._targetOrigin) ||\n        event.source !== this._targetWindow ||\n        !isValidStreamMessage(message) ||\n        message.target !== this._name\n      ) {\n        return;\n      }*/\n\n    console.log('[ProxyMessageStream LOG] ProxyService sending message to iframe', message.data);\n    this._onData(message.data);\n  }\n\n  _destroy() {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\n\nexport { ProxyMessageStream };\n","import { WindowPostMessageStream } from '@metamask/post-message-stream';\n\nimport { IFRAME_URL } from '../constants';\n\ntype WindowWorker = Window | undefined;\n\ninterface ExecutionControllerArgs {\n  proxyService: any;\n}\n\ninterface IJob {\n  id: string;\n  window: WindowWorker;\n  stream: WindowPostMessageStream;\n  terminateNext?: string;\n}\n\nclass ExecutionController {\n  \n  public _jobs: Record<string, IJob>;\n  private _proxyService: any;\n\n  constructor({ proxyService }: ExecutionControllerArgs) {\n    this._jobs = {};\n    this._proxyService = proxyService;\n  }\n\n  _createWindow = (jobId: string): Promise<WindowWorker> => {\n    return new Promise((resolve, reject) => {\n      const iframe = document.createElement('iframe');\n      iframe.setAttribute('id', jobId);\n  \n      iframe.setAttribute('src', IFRAME_URL);\n      document.body.appendChild(iframe);\n\n      // MDN article for `load` event: https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event\n      iframe.addEventListener('load', () => {\n        if (iframe.contentWindow) {\n          resolve(iframe.contentWindow);\n        } else {\n          // We don't know of a case when this would happen, but better to fail\n          // fast if it does.\n          reject(\n            new Error(\n              `iframe.contentWindow not present on load for job \"${jobId}\".`,\n            ),\n          );\n        }\n      });\n\n      iframe.setAttribute('sandbox', 'allow-scripts');\n    })\n  }\n\n  _deleteWindow = (jobId: string): void => {\n    const iframe = document.getElementById(jobId);\n    if (!iframe || !iframe.parentNode) {\n      throw new Error(`Window with the id ${jobId} was not found`)\n    }\n    iframe.parentNode.removeChild(iframe);\n  }\n\n  _initJobStream = async (jobId: string): Promise<IJob> => {\n    const window = await this._createWindow(jobId);\n    console.log({ window });\n    const stream = new WindowPostMessageStream({\n      name: 'parent',\n      target: 'child',\n      targetWindow: window,\n      targetOrigin: '*',\n    });\n    console.log({ stream });\n\n    stream.on('data', (data: any) => {\n      console.log('ExecutionController ->', data)\n      this._proxyService.write({ data, jobId });\n      this._handleJobDeletion({ data, jobId });\n    })\n\n    return { id: jobId, window, stream };\n  }\n\n  _update = (newJob: IJob): void => {    \n    this._jobs[newJob.id] = newJob;\n    console.log('[ExecutionController LOG] updateJobsState:', { newState: this._jobs, newElelment: newJob });\n  }\n\n  _handleJobDeletion = ({ jobId, data }: { jobId: string, data: any }): void => {\n    const job = this.get(jobId);\n    console.log('ExecutionController ->', job?.terminateNext, data?.data?.id)\n      if (job?.terminateNext && job?.terminateNext === data?.data?.id) {\n        this.delete(jobId);\n      }\n  }\n\n  // PUBLIC METHODS\n\n  init = async (jobId: string): Promise<void> => {\n    console.log('[ExecutionController LOG] initJob: Start new job');\n    const job = await this._initJobStream(jobId);\n    this._update(job);\n  };\n\n  get = (jobId: string): IJob => {\n    const job = this._jobs[jobId];\n    console.log('[ExecutionController LOG] getJob:', { jobId, job });\n    return job;\n  };\n\n  delete = (jobId: string): void => {\n    console.log('[ExecutionController LOG] delete:', { jobId });\n    this._jobs[jobId].stream._destroy();\n    console.log('[ExecutionController LOG] stream deleted:', { jobId });\n    this._deleteWindow(jobId);\n    console.log('[ExecutionController LOG] iframe deleted:', { jobId });\n    delete this._jobs[jobId];\n    console.log('[ExecutionController LOG] job deleted from state:', { jobId });\n  }\n\n};\n\nexport { ExecutionController };","export const IFRAME_URL = 'https://metamask.github.io/iframe-execution-environment/0.10.0';","import { useState, useEffect } from 'react';\n\nimport { ProxyMessageStream, ExecutionController } from './core';\nimport { METHODS } from './constants';\n\nimport './App.css';\n\nfunction App() {\n\n  const [proxyService, setProxyService] = useState();\n\n  useEffect(() => {\n    const proxy = new ProxyMessageStream({\n      name: 'webview',\n      target: 'rnside',\n      targetOrigin: '*',\n      targetWindow: window.ReactNativeWebView,\n    });\n    setProxyService(proxy);\n  }, []);\n\n  useEffect(() => {\n    if (!proxyService) {\n      return;\n    }\n\n    // Subscribe to events originated on the RN App\n    console.log('[WEB APP LOG] Subscribe to events originated on the RN App');\n\n    const executionController = new ExecutionController({\n      proxyService\n    });\n\n    proxyService.on('data', async (data) => {\n      console.log('[WEB APP LOG] Proxy receiving data - ', data);\n      const { data : { data: { method, id } }, jobId } = data;\n\n      let job;\n    \n      switch (method) {\n        case METHODS.PING:\n          console.log(executionController.jobs);\n          await executionController.init(jobId);\n          job = executionController.get(jobId);\n          job.stream.write(data.data);\n          // sendDataToRN();\n          return;\n\n        case METHODS.TERMINATE:\n          console.log('[WEB APP LOG] Terminate job', data.data, jobId, id);\n          job = executionController.get(jobId);\n          job.stream.write(data.data);\n          job.terminateNext = id;\n          return;\n\n        case METHODS.EXECUTE_SNAP:\n          job = executionController.get(jobId);\n          job.stream.write(data.data);\n          return;\n\n        case METHODS.SNAP_RPC:\n          job = executionController.get(jobId);\n          job.stream.write(data.data);\n          return;\n  \n        case METHODS.JSON_RPC:\n          job = executionController.get(jobId);\n          job.stream.write(data.data);\n          return;\n\n        default:\n          job = executionController.get(jobId);\n          job.stream.write(data.data);\n          console.log('Default case');\n      }\n\n    });\n  }, [proxyService]);\n\n  return (\n    <div className=\"App\" />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}